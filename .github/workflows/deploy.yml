name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  deploy:
    name: Pull latest image and update service
    runs-on: ubuntu-latest
    environment:
      name: zzaoclub
    env:
      # 你可以改成服务器上希望存放 compose 的路径
      REMOTE_APP_DIR: /root/server/hono-base
    steps:
      - name: Checkout repository (for uploading compose file)
        uses: actions/checkout@v4

      - name: Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            mkdir -p "${{ env.REMOTE_APP_DIR }}"

      - name: Upload docker-compose.prod.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "${{ env.REMOTE_APP_DIR }}/"
          overwrite: true

      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.REMOTE_APP_DIR }}"

            echo "=== Current directory and files ==="
            pwd
            ls -la

            # Prefer new plugin 'docker compose', fallback to legacy 'docker-compose'
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
              echo "Using: docker compose"
            else
              DC="docker-compose"
              echo "Using: docker-compose"
            fi

            # Load server-side env for compose variable interpolation (e.g., APP_PORT)
            ENV_FILE="/root/envs/hono/.env"
            echo "=== Checking env file: $ENV_FILE ==="
            if [ -f "$ENV_FILE" ]; then
              echo "Env file exists, content preview:"
              head -10 "$ENV_FILE" | grep -E '^[A-Z_]|^#' || echo "No env vars found"
              set -a
              . "$ENV_FILE"
              set +a
              # Fallback: parse APP_PORT if not exported by 'source'
              if [ -z "${APP_PORT:-}" ]; then
                # Try both APP_PORT and PORT from env file
                APP_PORT=$(grep -E '^[[:space:]]*(APP_PORT|PORT)[[:space:]]*=' "$ENV_FILE" | tail -n1 | sed -E 's/^[[:space:]]*(APP_PORT|PORT)[[:space:]]*=[[:space:]]*//; s/[[:space:]]*$//')
                export APP_PORT
              fi
            else
              echo "Env file not found at $ENV_FILE"
            fi
            echo "Using APP_PORT=${APP_PORT:-not-set}, PORT=${PORT:-not-set}"

            echo "=== Validating compose file ==="
            echo "Checking if docker-compose.prod.yml exists:"
            ls -la docker-compose.prod.yml
            if ! $DC -f docker-compose.prod.yml config -q 2>&1; then
              echo "Compose validation failed, showing config with errors:"
              $DC -f docker-compose.prod.yml config 2>&1 || true
              echo "=== Raw compose file content ==="
              cat docker-compose.prod.yml
              exit 1
            fi
            echo "Compose validation passed"

            echo "=== Pulling images ==="
            if ! $DC -f docker-compose.prod.yml pull --platform linux/amd64; then
              echo "Pull failed, trying without platform flag:"
              $DC -f docker-compose.prod.yml pull || exit 1
            fi

            echo "=== Starting services ==="
            $DC -f docker-compose.prod.yml up -d

            echo "=== Service status ==="
            $DC -f docker-compose.prod.yml ps

            echo "=== Cleaning up ==="
            docker image prune -f

      - name: Verify container health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cname="bun-hono-server-prod"
            for i in $(seq 1 10); do
              status=$(docker inspect -f '{{ .State.Health.Status }}' "$cname" 2>/dev/null || echo "starting")
              echo "[$i] Health: $status"
              if [ "$status" = "healthy" ]; then
                exit 0
              fi
              sleep 6
            done
            echo "Container not healthy in time" >&2
            docker ps
            exit 1
